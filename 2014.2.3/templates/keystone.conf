[DEFAULT]
{% if admin_token is not none() %}
admin_token = {{ admin_token }}
{% endif %}
verbose = True
debug = {{ debug }}
notification_topics = {{ notify_topic }}
rabbit_ha_queues = {{ rabbit_ha }}
{% if rabbit_ha %}
rabbit_hosts = {{ rabbit_hosts }}
{% else %}
rabbit_host = {{ rabbit_hosts }}
{% endif %}
rabbit_userid = {{ rabbit_userid }}
rabbit_password = {{ rabbit_pass }}
rabbit_port = {{ rabbit_port }}
tcp_keepalive = {{ tcp_keepalive }}
{% if tcp_keepalive %}
tcp_keepidle = {{ tcp_keepidle }}
{% endif %}

# SSL Support for Rabbit has not been implemented yet as documentation is unclear on what is actually required here
#       will enable these SSL features when tested
{% if rabbit_ssl %}
rabbit_use_ssl = True
kombu_ssl_version = TLSv1
    {% if rabbit_ca_certs is not none() %}
kombu_ssl_ca_certs = {{ rabbit_ca_certs }}
    {% endif %}
    {% if rabbit_key is not none() %}
kombu_ssl_keyfile = {{ rabbit_ssl_key }}
kombu_ssl_certfile = {{ rabbit_ssl_cert }}
    {% endif %}
{% endif %}
{% if admin_endpoint is not none() %}
admin_endpoint = {{ admin_endpoint }}
{% endif %}
{% if public_endpoint is not none() %}
public_endpoint = {{ public_endpoint }}
{% endif %}

[database]
connection = mysql://{{ keystone_db_user }}:{{ keystone_db_pass }}@{{ keystone_db_host }}/{{ keystone_db_name }}

[endpoint_filter]
driver = keystone.contrib.endpoint_filter.backends.sql.EndpointFilter
return_all_endpoints_if_no_filter = True

[endpoint_policy]
driver = keystone.contrib.endpoint_policy.backends.sql.EndpointPolicy

[identity_mapping]
driver = keystone.identity.mapping_backends.sql.Mapping
generator = keystone.identity.id_generators.sha256.Generator

[identity]
default_domain_id = {{ default_domain }}
driver = keystone.identity.backends.sql.Identity

[token]
driver = keystone.token.persistence.backends.sql.Token
provider = keystone.token.providers.uuid.Provider
expiration = {{ token_expire }}

[revoke]
driver = keystone.contrib.revoke.backends.sql.Revoke

[federation]
driver = keystone.contrib.federation.backends.sql.Federation

[policy]
driver = keystone.policy.backends.sql.Policy

[trust]
driver = keystone.trust.backends.sql.Trust
{% if identity_uri is not none() %}

[keystone_authtoken]
identity_uri = {{ identity_uri }}
{% endif %}

